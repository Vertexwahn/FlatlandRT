/*
 *  SPDX-FileCopyrightText: Copyright 2022-2023 Julian Amann <dev@vertexwahn.de>
 *  SPDX-License-Identifier: Apache-2.0
 */

#include "imaging/image.hpp"

#include "ImfInputFile.h"
#include "ImfHeader.h"
#include "ImfFrameBuffer.h"
#include "ImfOutputFile.h"
#include "ImfChannelList.h"
#include "ImfStringAttribute.h"
#include "ImfIO.h"

#include "gmock/gmock.h"

using namespace de_vertexwahn;

TEST(OpenEXR, test1) {
    std::string filename = "expected_camera_ray_dirs.exr";
    Image3f image(256, 256);

    Imf::Header header(image.width(), image.height());
    header.insert("comments", Imf::StringAttribute("Generated by Okapi"));

    Imf::ChannelList &channels = header.channels();
    channels.insert("R", Imf::Channel(Imf::FLOAT));
    channels.insert("G", Imf::Channel(Imf::FLOAT));
    channels.insert("B", Imf::Channel(Imf::FLOAT));

    Imf::FrameBuffer frameBuffer;
    size_t compStride = sizeof(float),
            pixelStride = 3 * compStride,
            rowStride = pixelStride * image.width();

    char *data = reinterpret_cast<char *>(image.data());
    frameBuffer.insert("R", Imf::Slice(Imf::FLOAT, data, pixelStride, rowStride)); data += compStride;
    frameBuffer.insert("G", Imf::Slice(Imf::FLOAT, data, pixelStride, rowStride)); data += compStride;
    frameBuffer.insert("B", Imf::Slice(Imf::FLOAT, data, pixelStride, rowStride));

    Imf::OutputFile file(filename.c_str(), header);
    file.setFrameBuffer(frameBuffer);
    file.writePixels(image.height());
}
