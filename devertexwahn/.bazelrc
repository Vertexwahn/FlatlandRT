#
#   SPDX-FileCopyrightText: Copyright 2022-2024 Julian Amann <dev@vertexwahn.de>
#   SPDX-License-Identifier: Apache-2.0
#

# Supported OS identifiers are linux, macos, windows, freebsd, and openbsd.
# Ignored for now - details here: https://stackoverflow.com/questions/73873449/can-enable-platform-specific-config-be-ignored-or-overriden
# build --enable_platform_specific_config

#build --symlink_prefix=/ # Suppress symlink creation (to avoid untracked files issues with git)

#-------------------------------------------------------------------------------------
# Bazel 8 migration
#-------------------------------------------------------------------------------------

#common --enable_workspace # Todo: breaks running Qt applications -> Migrate rules_qt first to Bazel 8
#common --incompatible_disallow_empty_glob=false  # TODO: Get rid of this - Set empty globs allowed policy explicitly where needed

#-------------------------------------------------------------------------------------
# Bzlmod
#-------------------------------------------------------------------------------------

common --allow_yanked_versions=rules_cc@0.1.0

#common --registry=file:///%workspace%/registry  # Does not work on Windows 11 + Bazel 6.5.0
common --registry=https://bcr.bazel.build


#-------------------------------------------------------------------------------------
# C++ compiler settings
#-------------------------------------------------------------------------------------

build --@boost.asio//:ssl=boringssl

# macOS (e.g. Clang 14.0.0)
build:macos --cxxopt=-std=c++2b  # see https://clang.llvm.org/cxx_status.html
build:macos --cxxopt=-Wall  # Turn on all warnings
#build:macos --sandbox_block_path=/usr/local # This will fix okapi.cli but break okapi.ui - Note: Workaround for https://github.com/bazelbuild/bazel/issues/10472 - compile error with boringssl
build:macos --define compiler=macos
build:macos --noincompatible_enable_cc_toolchain_resolution  # disable LLVM toolchain
#build:macos --cxxopt=-Werror # Commented out because of Embree
#build:macos --cxxopt=-Wextra
#build:macos --spawn_strategy=local

# macOS Intel (config used in CI jobs)
build:clang14_macos --cxxopt=-std=c++20
build:clang14_macos --noincompatible_enable_cc_toolchain_resolution  # disable LLVM toolchain
build:clang14_macos --cxxopt=-mwaitpkg
build:clang14_macos --define compiler=clang14_macos

# not used anymore? Todo: Remove this config if it is not needed anymore
## macOS M1 (config is used on local MacBook M1 Pro)
#build:clang14_macos_m1 --cxxopt=-std=c++20
#build:clang14_macos_m1 --incompatible_enable_cc_toolchain_resolution
#build:clang14_macos_m1 --linkopt=-ld_classic # Workaround for Xcode 15 linker bug, see for instance https://github.com/godotengine/godot/pull/81968/files
##build:clang14_macos_m1 --cxxopt=-mwaitpkg # lead to compilation issues on local M1 macBook
#build:clang14_macos_m1 --define compiler=clang14_macos_m1

# Todo: Add apple_debug config
# https://github.com/RobotLocomotion/drake/search?q=apple_debug

# GCC 11.4
#build:gcc11 --cxxopt=-std=c++23 # blocked by emsdk
build:gcc11 --cxxopt=-std=c++20
build:gcc11 --cxxopt=-Wall
build:gcc11 --define compiler=gcc11
build:gcc11 --cxxopt=-fpermissive # Needed for fmt
build:gcc11 --noincompatible_enable_cc_toolchain_resolution  # disable LLVM toolchain
#build:gcc11 --cxxopt=-Werror
#build:gcc11 --cxxopt=-Wno-volatile # blocked by emsdk
##build:gcc11 --cxxopt=-Wextra

build:linux --config=gcc11

build:gcc11_cpp14 --cxxopt=-std=c++14
build:gcc11_cpp14 --cxxopt=-Wall
build:gc11_cpp14 --define compiler=gcc11_cpp14

# GCC 13
build:gcc13 --cxxopt=-std=c++23
build:gcc13 --cxxopt=-Wall
build:gcc13 --define compiler=gcc13
build:gcc13 --cxxopt=-fpermissive # Needed for fmt
build:gcc13 --noincompatible_enable_cc_toolchain_resolution  # disable LLVM toolchain
#build:gcc13 --@rules_cuda//cuda:copts=-allow-unsupported-compiler

# Clang 14.0.0 (config is used on Ubuntu)
build:clang14 --cxxopt=-std=c++20
#build:clang14 --cxxopt=-mavx
#build:clang14 --cxxopt=-mavx2
#build:clang14 --cxxopt=-msse4.2
#build:clang14 --cxxopt=-Werror
build:clang14 --incompatible_enable_cc_toolchain_resolution
# Tell Bazel to pass the right flags for llvm-ar, not libtool. Only needed if you are building on darwin.
# See https://github.com/bazelbuild/bazel/blob/5c75d0acec21459bbb13520817e3806e1507e907/tools/cpp/unix_cc_toolchain_config.bzl#L1000-L1024
build:clang14 --features=-libtool
build:clang14 --cxxopt=-mwaitpkg
build:clang14 --define compiler=clang14

# Clang 19 (config is used on Ubuntu)
build:clang19 --cxxopt=-std=c++20

build:clang19 --extra_toolchains=@llvm_toolchain//:cc-toolchain-x86_64-linux
# Tell Bazel to pass the right flags for llvm-ar, not libtool. Only needed if you are building on darwin.
# See https://github.com/bazelbuild/bazel/blob/5c75d0acec21459bbb13520817e3806e1507e907/tools/cpp/unix_cc_toolchain_config.bzl#L1000-L1024
build:clang19 --features=-libtool
build:clang19 --cxxopt=-mwaitpkg
build:clang19 --define compiler=clang19

# Visual Studio 2019
#build:vs2019 --copt=-DNOGDI
#build:vs2019 --host_copt=-DNOGDI
build:vs2019 --copt=-DWIN32_LEAN_AND_MEAN
build:vs2019 --cxxopt=/utf-8
build:vs2019 --cxxopt=/std:c++20
build:vs2019 --cxxopt=/Zc:__cplusplus
build:vs2019 --cxxopt=/Zc:preprocessor # needed for __VA_OPT__ macro
build:vs2019 --define compiler=vs2019
build:vs2019 --enable_runfiles # https://github.com/bazelbuild/bazel/issues/8843
build:vs2019 --host_copt=-DWIN32_LEAN_AND_MEAN

# Visual Studio 2022
#build:vs2022 --copt=-DNOGDI
#build:vs2022 --host_copt=-DNOGDI
build:vs2022 --copt=-DWIN32_LEAN_AND_MEAN
build:vs2022 --cxxopt=/std:c++20
build:vs2022 --cxxopt=/utf-8
build:vs2022 --cxxopt=/Zc:__cplusplus
build:vs2022 --cxxopt=/Zc:preprocessor # needed for __VA_OPT__ macro
build:vs2022 --define compiler=vs2022
build:vs2022 --enable_runfiles # https://github.com/bazelbuild/bazel/issues/8843
build:vs2022 --host_copt=-DWIN32_LEAN_AND_MEAN

build:windows --config=vs2022

# Address Sanitizer
build:asan --config=gcc9
build:asan --strip=never
build:asan --copt -fsanitize=address
build:asan --copt -O1
build:asan --copt -fno-omit-frame-pointer
build:asan --linkopt -fsanitize=address

# clang-tidy
build:clang-tidy --aspects @bazel_clang_tidy//clang_tidy:clang_tidy.bzl%clang_tidy_aspect
build:clang-tidy --output_groups=report

# Optimized build
build:optimized build --copt=-O3

# IWYU
# More details here: https://github.com/storypku/bazel_iwyu/pull/12
#build:iwyu --@bazel_iwyu//:iwyu_mappings=@my_repo//tools:iwyu_mappings
build:iwyu --config=gcc11
#build:iwyu --config=clang19
build:iwyu --aspects @bazel_iwyu//bazel/iwyu:iwyu.bzl%iwyu_aspect
build:iwyu --output_groups=report
build:iwyu --build_tag_filters=-no-iwyu # To include everything except the rules tagged with "no-iwyu"
build:iwyu --@bazel_iwyu//:iwyu_opts=--verbose=3,--no_fwd_decls,--cxx17ns,--max_line_length=127

# Emscripten
build:emscripten --features=exceptions

try-import %workspace%/bazel/bazelrc/.bazelrc.remote_cache
try-import %workspace%/bazel/bazelrc/.bazelrc.build_meta
