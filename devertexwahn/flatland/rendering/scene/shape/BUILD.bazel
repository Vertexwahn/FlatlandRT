"""
    SPDX-FileCopyrightText: Copyright 2022-2023 Julian Amann <dev@vertexwahn.de>
    SPDX-License-Identifier: Apache-2.0
"""

package(default_visibility = ["//visibility:public"])

cc_library(
    name = "disk",
    srcs = ["disk.h"],
    deps = [
        "//flatland/rendering:property_set",
        "//flatland/rendering/scene/shape",
        "//math:intersection",
    ],
)

cc_test(
    name = "disk_test",
    size = "small",
    srcs = [
        "disk_test.cpp",
    ],
    deps = [
        ":disk",
        "//math:refract",
        "@googletest//:gtest_main",
    ],
)

cc_library(
    name = "emitter",
    hdrs = ["emitter.h"],
    deps = [
        "//core:object",
        "//imaging:color",
    ],
)

cc_test(
    name = "emitter_test",
    size = "small",
    srcs = ["emitter_test.cpp"],
    deps = [
        ":emitter",
        "@googletest//:gtest_main",
    ],
)

cc_library(
    name = "medium_event",
    hdrs = ["medium_event.h"],
    deps = [
        "//math:frame",
    ],
)

cc_library(
    name = "polygon",
    hdrs = ["polygon.h"],
    deps = [
        "//flatland/rendering/scene/shape",
        "//math:geometry",
        "//math:intersection",
    ],
)

cc_test(
    name = "polygon_test",
    size = "small",
    srcs = [
        "polygon_test.cpp",
    ],
    deps = [
        ":polygon",
        "@googletest//:gtest_main",
    ],
)

cc_library(
    name = "rectangle",
    hdrs = ["rectangle.h"],
    deps = [
        "//flatland/rendering/scene/shape",
        "//math:geometry",
        "//math:intersection",
    ],
)

cc_test(
    name = "rectangle_test",
    size = "small",
    srcs = [
        "rectangle_test.cpp",
    ],
    deps = [
        ":rectangle",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "rectangle_test_via_catch2",
    size = "small",
    timeout = "short",
    srcs = [
        "rectangle_test_via_catch2.cpp",
    ],
    defines = ["CATCH_CONFIG_MAIN"],
    deps = [
        ":rectangle",
        "@catch2//:catch2_main",
    ],
)

cc_library(
    name = "shape",
    hdrs = ["shape.h"],
    deps = [
        ":emitter",
        ":medium_event",
        "//core:object",
        "//flatland/rendering/bsdf:svg_material",
        "//math:axis_aligned_bounding_box",
        "//math:frame",
    ],
)

cc_test(
    name = "shape_test",
    size = "small",
    srcs = [
        "shape_test.cpp",
    ],
    deps = [
        "//flatland/rendering/scene/shape",
        "@googletest//:gtest_main",
    ],
)

cc_library(
    name = "triangle_mesh",
    hdrs = ["triangle_mesh.h"],
    deps = [
        "//core:logging",
        "//flatland/rendering/scene/shape",
        "//math:axis_aligned_bounding_box",
        "//math:geometry",
        "//math:intersection",
    ],
)

cc_test(
    name = "triangle_mesh_test",
    size = "small",
    srcs = [
        "triangle_mesh_test.cpp",
    ],
    data = ["//flatland/scenes/terrain:scenes"],
    deps = [
        ":triangle_mesh",
        "@googletest//:gtest_main",
    ],
)
